# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # configure known_hosts
      - uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: create .ssh/known_hosts
        run: |
          ssh-keyscan -H -t rsa -v ${{ secrets.SERVER_IP }}  >> ~/.ssh/known_hosts


      # Cache and restore maven .m2-repository
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      ## Install graalvm
      #- uses: DeLaGuardo/setup-graalvm@5.0
      #  with:
      #    # GraalVM version, no pattern syntax available atm
      #    graalvm: '21.3.0'
      #    # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
      #    java: 'java17'
      #    # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
      #    arch: 'amd64'
      #- run: java -version
      #
      ## Install native-image
      #- name: Install native-image component
      #  run: |
      #    gu install native-image
      #
      ## Create native build
      #- name: Create native build
      #  run: |
      #    ls -lh
      #    mvn package -Dquarkus.package.type=native -Dmaven.test.skip=true
      #    ls target
      #
      #- name: copy binaries to server
      #  run: |
      #    ls -lh
      #    scp target/covtrack-${{ env.RELEASE_VERSION }}-runner ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create jvm build
        run: |
         #mvn package -Dquarkus.package.type=uber-jar -Dquarkus.container-image.push=true -Dquarkus.container-image.registry=${{ env.REGISTRY }} -Dquarkus.jib.base-registry-username=${{ github.actor }} -Dquarkus.jib.base-registry-password=${{ secrets.REGISTRY_ACCESS_TOKEN }}
         mvn package -Dquarkus.package.type=uber-jar
         docker image tag htl-leonding/covid-tracker:${{ env.RELEASE_VERSION }} ghcr.io/htl-leonding/covid-tracker:${{ env.RELEASE_VERSION }}
         docker push ghcr.io/htl-leonding/covid-tracker:${{ env.RELEASE_VERSION }}

