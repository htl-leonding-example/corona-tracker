# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # configure known_hosts
      - uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: create .ssh/known_hosts
        run: |
          ssh-keyscan -H -t rsa -v ${{ secrets.SERVER_IP }}  >> ~/.ssh/known_hosts


      # Cache and restore maven .m2-repository
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: cat ~/.ssh/known_hosts

      ## Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.

      ## Install graalvm
      #- uses: DeLaGuardo/setup-graalvm@5.0
      #  with:
      #    # GraalVM version, no pattern syntax available atm
      #    graalvm: '21.3.0'
      #    # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
      #    java: 'java17'
      #    # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
      #    arch: 'amd64'
      #- run: java -version
      #
      ## Install native-image
      #- name: Install native-image component
      #  run: |
      #    gu install native-image

      ## Create native build
      #- name: Create native build
      #  run: |
      #    ls -lh
      #    mvn package -Dquarkus.package.type=native -Dmaven.test.skip=true
      #    ls target

      - name: copy binaries to server
        run: |
          ls -lh
          scp ./datasource.txt ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/



